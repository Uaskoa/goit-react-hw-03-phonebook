{"version":3,"sources":["components/Filter/Filter.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactListItem.jsx","components/ContactList/ContactList.jsx","App.js","index.js"],"names":["Filter","value","onChange","type","className","name","ContactForm","state","number","nameInputId","shortId","generate","phoneInputId","handleNameChange","event","setState","currentTarget","handlePhoneChange","handleSubmit","e","preventDefault","props","onSubmit","reset","this","htmlFor","id","pattern","title","required","Component","ContactListItem","onDeleteContact","onClick","ContactList","contacts","map","contact","App","filter","handleSearchChange","formSubmitHandler","data","normalizedName","toLowerCase","find","alert","prevState","getFilteredContacts","normalizedFilter","includes","deleteContact","contactId","localStorage","getItem","parsedContacts","JSON","parse","prevProps","setItem","stringify","filteredContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qSAoBeA,EAlBA,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACb,qCACE,uDACA,uBACEC,KAAK,OACLC,UAAU,QACVH,MAAOA,EACPI,KAAK,SACLH,SAAUA,Q,gBCmEDI,G,kNAvEbC,MAAQ,CACNF,KAAM,GACNG,OAAQ,I,EAGVC,YAAcC,IAAQC,W,EACtBC,aAAeF,IAAQC,W,EAEvBE,iBAAmB,SAAAC,GACjB,EAAKC,SAAS,CAAEV,KAAMS,EAAME,cAAcf,S,EAG5CgB,kBAAoB,SAAAH,GAClB,EAAKC,SAAS,CAAEP,OAAQM,EAAME,cAAcf,S,EAG9CiB,aAAe,SAAAC,GACbA,EAAEC,iBAEF,EAAKC,MAAMC,SAAS,EAAKf,OAEzB,EAAKgB,S,EAGPA,MAAQ,WACN,EAAKR,SAAS,CAAEV,KAAM,GAAIG,OAAQ,M,4CAGpC,WACE,OACE,uBAAMJ,UAAU,OAAOkB,SAAUE,KAAKN,aAAtC,UACE,wBAAOd,UAAU,aAAaqB,QAASD,KAAKf,YAA5C,UACE,sBAAML,UAAU,mBAAhB,kBACA,uBACEA,UAAU,QACVD,KAAK,OACLuB,GAAIF,KAAKf,YACTR,MAAOuB,KAAKjB,MAAMF,KAClBH,SAAUsB,KAAKX,iBACfR,KAAK,OACLsB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAGZ,wBAAOzB,UAAU,aAAaqB,QAASD,KAAKZ,aAA5C,UACE,sBAAMR,UAAU,mBAAhB,oBACA,uBACEA,UAAU,QACVD,KAAK,MACLuB,GAAIF,KAAKZ,aACTX,MAAOuB,KAAKjB,MAAMC,OAClBH,KAAK,SACLH,SAAUsB,KAAKP,kBACfU,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,IAEV,wBAAQzB,UAAU,qBAAqBD,KAAK,SAA5C,mC,GA3DgB2B,cCkBXC,G,KApBS,SAAC,GAAD,IAAGL,EAAH,EAAGA,GAAIrB,EAAP,EAAOA,KAAMG,EAAb,EAAaA,OAAQwB,EAArB,EAAqBA,gBAArB,OACtB,qBAAI5B,UAAU,oBAAd,UACE,uBAAMA,UAAU,oBAAhB,UAAqCC,EAArC,OACA,uBAAMD,UAAU,sBAAhB,UAAuCI,EAAvC,OACA,wBACEL,KAAK,SACLC,UAAU,SACV6B,QAAS,kBAAMD,EAAgBN,IAHjC,yBCeWQ,EAlBK,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUH,EAAb,EAAaA,gBAAb,OAClB,oBAAI5B,UAAU,eAAd,SACG+B,EAASC,KAAI,SAAAC,GAAO,OACnB,cAAC,EAAD,CACEX,GAAIW,EAAQX,GAEZrB,KAAMgC,EAAQhC,KACdG,OAAQ6B,EAAQ7B,OAChBwB,gBAAiBA,GAHZK,EAAQX,UCqFNY,G,wNArFb/B,MAAQ,CACN4B,SAAU,GACVI,OAAQ,I,EAGVC,mBAAqB,SAAA1B,GACnB,EAAKC,SAAS,CAAEwB,OAAQzB,EAAME,cAAcf,S,EAG9CwC,kBAAoB,SAAAC,GAClB,IAAQrC,EAAiBqC,EAAjBrC,KAAMG,EAAWkC,EAAXlC,OACRmC,EAAiBtC,EAAKuC,cAE5B,GACE,EAAKrC,MAAM4B,SAASU,MAClB,qBAAGxC,KAAgBuC,gBAAkBD,KAGvC,OAAOG,MAAM,GAAD,OAAIzC,EAAJ,6BAGd,EAAKU,UAAS,SAAAgC,GAAS,MAAK,CAC1BZ,SAAS,GAAD,mBACHY,EAAUZ,UADP,CAEN,CAAET,GAAIhB,IAAQC,WAAYN,OAAMG,iB,EAKtCwC,oBAAsB,WACpB,MAA6B,EAAKzC,MAA1B4B,EAAR,EAAQA,SACFc,EADN,EAAkBV,OACcK,cAEhC,OAAOT,EAASI,QAAO,SAAAF,GAAO,OAC5BA,EAAQhC,KAAKuC,cAAcM,SAASD,O,EAIxCE,cAAgB,SAAAC,GACd,EAAKrC,UAAS,SAAAgC,GAAS,MAAK,CAC1BZ,SAAUY,EAAUZ,SAASI,QAAO,SAAAF,GAAO,OAAIA,EAAQX,KAAO0B,U,uDAIlE,WACE,IAAMjB,EAAWkB,aAAaC,QAAQ,YAChCC,EAAiBC,KAAKC,MAAMtB,GAC9BoB,GACF/B,KAAKT,SAAS,CAAEoB,SAAUoB,M,gCAI9B,SAAmBG,EAAWX,GACxBvB,KAAKjB,MAAM4B,WAAaY,EAAUZ,UACpCkB,aAAaM,QAAQ,WAAYH,KAAKI,UAAUpC,KAAKjB,MAAM4B,a,oBAI/D,WACE,IAAM0B,EAAmBrC,KAAKwB,sBAC9B,OACE,qBAAK5C,UAAU,MAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,YAAf,UACE,2CAEA,cAAC,EAAD,CAAakB,SAAUE,KAAKiB,oBAE5B,0CAEA,cAAC,EAAD,CACExC,MAAOuB,KAAKjB,MAAMgC,OAClBrC,SAAUsB,KAAKgB,qBAEjB,cAAC,EAAD,CACEL,SAAU0B,EACV7B,gBAAiBR,KAAK2B,2B,GA7ElBrB,cCJlBgC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.ad76b36f.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <>\r\n    <h3>Find contacts by name</h3>\r\n    <input\r\n      type=\"text\"\r\n      className=\"input\"\r\n      value={value}\r\n      name=\"filter\"\r\n      onChange={onChange}\r\n    ></input>\r\n  </>\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\n\r\nexport default Filter;\r\n","import { Component } from 'react';\r\nimport shortId from 'shortid';\r\nimport './ContactForm.scss';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  nameInputId = shortId.generate();\r\n  phoneInputId = shortId.generate();\r\n\r\n  handleNameChange = event => {\r\n    this.setState({ name: event.currentTarget.value });\r\n  };\r\n\r\n  handlePhoneChange = event => {\r\n    this.setState({ number: event.currentTarget.value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    this.props.onSubmit(this.state);\r\n\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"form\" onSubmit={this.handleSubmit}>\r\n        <label className=\"form-label\" htmlFor={this.nameInputId}>\r\n          <span className=\"form-label-title\">Name</span>\r\n          <input\r\n            className=\"input\"\r\n            type=\"text\"\r\n            id={this.nameInputId}\r\n            value={this.state.name}\r\n            onChange={this.handleNameChange}\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n        <label className=\"form-label\" htmlFor={this.phoneInputId}>\r\n          <span className=\"form-label-title\">Number</span>\r\n          <input\r\n            className=\"input\"\r\n            type=\"tel\"\r\n            id={this.phoneInputId}\r\n            value={this.state.number}\r\n            name=\"number\"\r\n            onChange={this.handlePhoneChange}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n          <button className=\"form-button button\" type=\"submit\">\r\n            Add contact\r\n          </button>\r\n        </label>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactForm;\r\n","import './ContactList.scss';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ContactListItem = ({ id, name, number, onDeleteContact }) => (\r\n  <li className=\"contact-list-item\">\r\n    <span className=\"contact-list-name\">{name} </span>\r\n    <span className=\"contact-list-number\">{number} </span>\r\n    <button\r\n      type=\"button\"\r\n      className=\"button\"\r\n      onClick={() => onDeleteContact(id)}\r\n    >\r\n      Delete\r\n    </button>\r\n  </li>\r\n);\r\n\r\nContactListItem.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\nexport default ContactListItem;\r\n","import ContactListItem from './ContactListItem';\r\nimport './ContactList.scss';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => (\r\n  <ul className=\"contact-list\">\r\n    {contacts.map(contact => (\r\n      <ContactListItem\r\n        id={contact.id}\r\n        key={contact.id}\r\n        name={contact.name}\r\n        number={contact.number}\r\n        onDeleteContact={onDeleteContact}\r\n      />\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import { Component } from 'react';\nimport Filter from './components/Filter/Filter';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport shortId from 'shortid';\nimport './styles.css';\nimport './App.scss';\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: '',\n  };\n\n  handleSearchChange = event => {\n    this.setState({ filter: event.currentTarget.value });\n  };\n\n  formSubmitHandler = data => {\n    const { name, number } = data;\n    const normalizedName = name.toLowerCase();\n\n    if (\n      this.state.contacts.find(\n        ({ name }) => name.toLowerCase() === normalizedName,\n      )\n    ) {\n      return alert(`${name} is already in contacts.`);\n    }\n\n    this.setState(prevState => ({\n      contacts: [\n        ...prevState.contacts,\n        { id: shortId.generate(), name, number },\n      ],\n    }));\n  };\n\n  getFilteredContacts = () => {\n    const { contacts, filter } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  deleteContact = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  render() {\n    const filteredContacts = this.getFilteredContacts();\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <div className=\"phonebook\">\n            <h1>Phonebook</h1>\n\n            <ContactForm onSubmit={this.formSubmitHandler} />\n\n            <h2>Contacts</h2>\n\n            <Filter\n              value={this.state.filter}\n              onChange={this.handleSearchChange}\n            />\n            <ContactList\n              contacts={filteredContacts}\n              onDeleteContact={this.deleteContact}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}